!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/aman2003/Documents/projects/DSA_projects/DSA_Project_Sem4/Algorithm2/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/95f44c56/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
CONSTRAINTS	constraints.h	/^#define CONSTRAINTS$/;"	d
MATH	mathematics.c	/^#define MATH$/;"	d	file:
MATHEMATICS	mathematics.h	/^#define MATHEMATICS /;"	d
NNODE	deadline_constraint.c	/^#define NNODE /;"	d	file:
STRUCTURES	structures.h	/^#define STRUCTURES /;"	d
a_raise_b	mathematics.c	/^double a_raise_b(double a, double b){$/;"	f	typeref:typename:double
add_vector	mathematics.c	/^void add_vector(coordinate a, coordinate b, coordinate *result){$/;"	f	typeref:typename:void
arr	deadline_constraint.c	/^double arr(route r, location_node *k){$/;"	f	typeref:typename:double
arr	structures.h	/^	request *arr;$/;"	m	struct:set_of_requests	typeref:typename:request *
arrival_time	compute_obj.c	/^double arrival_time(route r, coordinate l){$/;"	f	typeref:typename:double
capacity	structures.h	/^		int capacity;$/;"	m	struct:request	typeref:typename:int
capacity	structures.h	/^		int capacity;$/;"	m	struct:worker	typeref:typename:int
check_capacity_constraint	capacity_constraint.c	/^int check_capacity_constraint(worker w, request new_request, double *pck_values, int i, int j){$/;"	f	typeref:typename:int
check_deadline_constraint	deadline_constraint.c	/^int check_deadline_constraint(route r, double *slk, int i, int j, location_node *origin, locatio/;"	f	typeref:typename:int
coordinate	structures.h	/^typedef struct coordinate{$/;"	s
coordinate	structures.h	/^}coordinate;$/;"	t	typeref:struct:coordinate
corresponding_request	structures.h	/^		struct request *corresponding_request;$/;"	m	struct:location_node	typeref:struct:request *
current_location	structures.h	/^		coordinate current_location;$/;"	m	struct:worker	typeref:typename:coordinate
ddl	deadline_constraint.c	/^double ddl(location_node *k){$/;"	f	typeref:typename:double
deadline_time	structures.h	/^		double release_time, deadline_time;$/;"	m	struct:request	typeref:typename:double
destination	structures.h	/^		struct location_node *origin, *destination;$/;"	m	struct:request	typeref:struct:location_node *
det	deadline_constraint.c	/^double det(location_node *k, location_node *p){$/;"	f	typeref:typename:double
dis	mathematics.c	/^double dis(location_node *a, location_node *b){$/;"	f	typeref:typename:double
dis_from_origin	deadline_constraint.c	/^int dis_from_origin[NNODE];$/;"	v	typeref:typename:int[]
dis_index	mathematics.c	/^double dis_index(location_node *a, location_node *b){$/;"	f	typeref:typename:double
distance	mathematics.c	/^double distance(coordinate a, coordinate b){$/;"	f	typeref:typename:double
find_unit_vector	mathematics.c	/^void find_unit_vector(coordinate a, coordinate b, coordinate *result){$/;"	f	typeref:typename:void
flow_time	compute_obj.c	/^double flow_time(route r, request rq){$/;"	f	typeref:typename:double
index	structures.h	/^		int index;    \/\/ it is for simplicity for precalculation - basically it is index of node$/;"	m	struct:location_node	typeref:typename:int
insert	deadline_constraint.c	/^void insert(location_node *a, location_node *b){$/;"	f	typeref:typename:void
insertion_operator	insert_precalculate.c	/^void insertion_operator(route r, worker w, request new_request){$/;"	f	typeref:typename:void
location_node	structures.h	/^typedef struct location_node{$/;"	s
location_node	structures.h	/^}location_node; $/;"	t	typeref:struct:location_node
max	mathematics.c	/^int max(int a, int b){$/;"	f	typeref:typename:int
max_of_mf	compute_obj.c	/^double max_of_mf(double mf1, double mf2, double mf3, double mf4){$/;"	f	typeref:typename:double
min	mathematics.c	/^double min(double num1, double num2){$/;"	f	typeref:typename:double
mobj	compute_obj.c	/^void mobj(route r, double **mobj_values){$/;"	f	typeref:typename:void
next_location_node	structures.h	/^		struct location_node *next_location_node;$/;"	m	struct:location_node	typeref:struct:location_node *
no_of_nodes	structures.h	/^		int no_of_nodes;$/;"	m	struct:route	typeref:typename:int
obj	compute_obj.c	/^double obj(route r, int i, int j, location_node *li, location_node *lj, double **mobj_values, re/;"	f	typeref:typename:double
origin	structures.h	/^		struct location_node *origin, *destination;$/;"	m	struct:request	typeref:struct:location_node *
path	structures.h	/^		location_node *path;$/;"	m	struct:route	typeref:typename:location_node *
picked_up	structures.h	/^		int picked_up;$/;"	m	struct:worker	typeref:typename:int
pre_calculate_pck	capacity_constraint.c	/^void pre_calculate_pck(route r, double *pck_values){$/;"	f	typeref:typename:void
pre_calculation	insert_precalculate.c	/^void pre_calculation(route r){$/;"	f	typeref:typename:void
release_time	structures.h	/^		double release_time, deadline_time;$/;"	m	struct:request	typeref:typename:double
request	structures.h	/^typedef struct request{$/;"	s
request	structures.h	/^}request; $/;"	t	typeref:struct:request
route	structures.h	/^typedef struct route{$/;"	s
route	structures.h	/^}route; $/;"	t	typeref:struct:route
scale_vector	mathematics.c	/^void scale_vector(coordinate unit_vector, double scale, coordinate *result){$/;"	f	typeref:typename:void
sequenced_location	structures.h	/^		coordinate sequenced_location;$/;"	m	struct:location_node	typeref:typename:coordinate
set_of_requests	structures.h	/^typedef struct set_of_requests{$/;"	s
set_of_requests	structures.h	/^}set_of_requests; $/;"	t	typeref:struct:set_of_requests
size	structures.h	/^	int size;$/;"	m	struct:set_of_requests	typeref:typename:int
slk_intermediate	deadline_constraint.c	/^void slk_intermediate(route r, double *slk, location_node *n, int k){$/;"	f	typeref:typename:void
slk_time	deadline_constraint.c	/^void slk_time(route r, double *slk){$/;"	f	typeref:typename:void
time_between_nodes	compute_obj.c	/^double time_between_nodes(coordinate n1, coordinate n2){$/;"	f	typeref:typename:double
update_worker_route	insert_precalculate.c	/^void update_worker_route(route r, worker w, request *new_request){$/;"	f	typeref:typename:void
worker	structures.h	/^typedef struct worker{$/;"	s
worker	structures.h	/^}worker; $/;"	t	typeref:struct:worker
x	structures.h	/^		int x, y;$/;"	m	struct:coordinate	typeref:typename:int
y	structures.h	/^		int x, y;$/;"	m	struct:coordinate	typeref:typename:int
