!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/aman2003/Documents/projects/DSA_projects/DSA_Project_Sem4/Algorithm2/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/95f44c56/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
%.o	Makefile	/^%.o: %.c$/;"	t
-C	Makefile	/^-C      = -c$/;"	m
-G	Makefile	/^-G 		= -g$/;"	m
-LM	Makefile	/^-LM   	= -lm$/;"	m
-O	Makefile	/^-O 		= -o$/;"	m
CAPACITY	include/ridesharing.h	/^#define CAPACITY /;"	d
CAPACITY	src/insert_operator/insert_precalculate.c	/^#define CAPACITY /;"	d	file:
CONSTRAINTS	include/constraints.h	/^#define CONSTRAINTS$/;"	d
FLAGS	Makefile	/^FLAGS 	= -I include$/;"	m
GCC	Makefile	/^GCC   	= gcc $/;"	m
MAIN.c	Makefile	/^MAIN.c 	= main.c$/;"	m
MATH	src/tools/mathematics.c	/^#define MATH$/;"	d	file:
MATHEMATICS	include/mathematics.h	/^#define MATHEMATICS /;"	d
NNODE	src/constraints/deadline_constraint.c	/^#define NNODE /;"	d	file:
NNODES	src/insert_operator/insert_precalculate.c	/^#define NNODES /;"	d	file:
Request	include/structures.h	/^typedef struct Request{$/;"	s
Request	include/structures.h	/^}Request; $/;"	t	typeref:struct:Request
RideSharing_State	include/ridesharing.h	/^typedef struct RideSharing_State{$/;"	s
RideSharing_State	include/ridesharing.h	/^}RideSharing_State;$/;"	t	typeref:struct:RideSharing_State
Route	include/structures.h	/^typedef struct Route{$/;"	s
Route	include/structures.h	/^}Route; $/;"	t	typeref:struct:Route
STRUCTURES	include/structures.h	/^#define STRUCTURES /;"	d
Set_of_requests	include/structures.h	/^typedef struct Set_of_requests{$/;"	s
Set_of_requests	include/structures.h	/^}Set_of_requests; $/;"	t	typeref:struct:Set_of_requests
VPATH	Makefile	/^VPATH = src\/constraints 		\\$/;"	m
Worker	include/structures.h	/^typedef struct Worker{$/;"	s
Worker	include/structures.h	/^}Worker; $/;"	t	typeref:struct:Worker
X_CORD	include/ridesharing.h	/^#define X_CORD /;"	d
Y_CORD	include/ridesharing.h	/^#define Y_CORD /;"	d
a_raise_b	src/tools/mathematics.c	/^double a_raise_b(double a, double b){$/;"	f	typeref:typename:double
add_vector	src/tools/mathematics.c	/^void add_vector(coordinate *result, coordinate a, coordinate b){$/;"	f	typeref:typename:void
arr	include/structures.h	/^	Request *arr;$/;"	m	struct:Set_of_requests	typeref:typename:Request *
arr	src/constraints/deadline_constraint.c	/^double arr(Route r, location_node *k, Request newRequest){$/;"	f	typeref:typename:double
capacity	include/structures.h	/^		int capacity;$/;"	m	struct:Request	typeref:typename:int
capacity	include/structures.h	/^		int capacity;$/;"	m	struct:Worker	typeref:typename:int
capacity_constraint.o	Makefile	/^capacity_constraint.o: capacity_constraint.c $/;"	t
check_capacity_constraint	src/constraints/capacity_constraint.c	/^int check_capacity_constraint(Worker worker, Request new_request, double *pck_values, int i, int/;"	f	typeref:typename:int
check_deadline_constraint	src/constraints/deadline_constraint.c	/^int check_deadline_constraint(Route r, double *slk, int i, int j, location_node *origin, locatio/;"	f	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
compute_obj.o	Makefile	/^compute_obj.o: compute_obj.c$/;"	t
coordinate	include/structures.h	/^typedef struct coordinate{$/;"	s
coordinate	include/structures.h	/^}coordinate;$/;"	t	typeref:struct:coordinate
corresponding_request	include/structures.h	/^		struct Request *corresponding_request;$/;"	m	struct:location_node	typeref:struct:Request *
current_location	include/structures.h	/^		coordinate current_location;$/;"	m	struct:Worker	typeref:typename:coordinate
ddl	src/constraints/deadline_constraint.c	/^double ddl(location_node *k){$/;"	f	typeref:typename:double
deadline_constraint.o	Makefile	/^deadline_constraint.o: deadline_constraint.c $/;"	t
deadline_time	include/structures.h	/^		double release_time, deadline_time;$/;"	m	struct:Request	typeref:typename:double
destination	include/structures.h	/^		struct location_node *origin, *destination;$/;"	m	struct:Request	typeref:struct:location_node *
det	src/constraints/deadline_constraint.c	/^double det(location_node *k, location_node *p){$/;"	f	typeref:typename:double
dis	src/tools/mathematics.c	/^double dis(location_node *a, location_node *b){$/;"	f	typeref:typename:double
dis_from_origin	src/constraints/deadline_constraint.c	/^int dis_from_origin[NNODE];$/;"	v	typeref:typename:int[]
dis_index	src/constraints/deadline_constraint.c	/^double dis_index(location_node *a, location_node *b){$/;"	f	typeref:typename:double
display_route	src/insert_operator/insert_precalculate.c	/^void display_route(Route r){$/;"	f	typeref:typename:void
distance_node	src/tools/mathematics.c	/^double distance_node(coordinate a, coordinate b){$/;"	f	typeref:typename:double
find_unit_vector	src/tools/mathematics.c	/^void find_unit_vector(coordinate *result, coordinate a, coordinate b){$/;"	f	typeref:typename:void
flow_time	src/constraints/compute_obj.c	/^double flow_time(Route r, Request rq){$/;"	f	typeref:typename:double
index	include/structures.h	/^		int index;    \/\/ it is for simplicity for precalculation - basically it is index of node$/;"	m	struct:location_node	typeref:typename:int
init_Ridesharing_State	src/insert_operator/ridesharing.c	/^void init_Ridesharing_State(RideSharing_State *ridesharing_state){$/;"	f	typeref:typename:void
insert	src/constraints/deadline_constraint.c	/^void insert(location_node *a, location_node *b){$/;"	f	typeref:typename:void
insert_coordinate	src/insert_operator/insert_precalculate.c	/^void insert_coordinate(location_node *l, double x, double y){$/;"	f	typeref:typename:void
insert_node	src/insert_operator/insert_precalculate.c	/^void insert_node(RideSharing_State *ridesharing_state, Request *request, location_node *l, int i/;"	f	typeref:typename:void
insert_precalculate.o	Makefile	/^insert_precalculate.o: insert_precalculate.c$/;"	t
insertion_operator	src/insert_operator/insert_precalculate.c	/^void insertion_operator(Route r, Worker w, Request *new_request){$/;"	f	typeref:typename:void
location_node	include/structures.h	/^typedef struct location_node{$/;"	s
location_node	include/structures.h	/^}location_node; $/;"	t	typeref:struct:location_node
main	src/main.c	/^int main(){$/;"	f	typeref:typename:int
mathematics.o	Makefile	/^mathematics.o: mathematics.c$/;"	t
max	src/tools/mathematics.c	/^int max(int a, int b){$/;"	f	typeref:typename:int
max_of_mf	src/constraints/compute_obj.c	/^double max_of_mf(double mf1, double mf2, double mf3, double mf4){$/;"	f	typeref:typename:double
min	src/tools/mathematics.c	/^double min(double num1, double num2){$/;"	f	typeref:typename:double
mobj	src/constraints/compute_obj.c	/^void mobj(Route r, double **mobj_values){$/;"	f	typeref:typename:void
next_location_node	include/structures.h	/^		struct location_node *next_location_node;$/;"	m	struct:location_node	typeref:struct:location_node *
no_of_nodes	include/structures.h	/^		int no_of_nodes;$/;"	m	struct:Route	typeref:typename:int
obj	src/constraints/compute_obj.c	/^double obj(Route r, int i, int j, location_node *li, location_node *lj, double **mobj_values, Re/;"	f	typeref:typename:double
origin	include/structures.h	/^		struct location_node *origin, *destination;$/;"	m	struct:Request	typeref:struct:location_node *
path	include/structures.h	/^		location_node *path;$/;"	m	struct:Route	typeref:typename:location_node *
picked_up	include/structures.h	/^		int picked_up;$/;"	m	struct:Worker	typeref:typename:int
pre_calculate_pck	src/constraints/capacity_constraint.c	/^void pre_calculate_pck(Route r, double *pck_values, Worker worker){$/;"	f	typeref:typename:void
pre_calculation	src/insert_operator/insert_precalculate.c	/^void pre_calculation(Route r, double **slk_values, double **pck_values, double ***mobj_values, R/;"	f	typeref:typename:void
release_time	include/structures.h	/^		double release_time, deadline_time;$/;"	m	struct:Request	typeref:typename:double
request	src/main.c	/^void request(Request *request, double orx, double ory, double drx, double dry, double release_ti/;"	f	typeref:typename:void
result	Makefile	/^result: capacity_constraint.o compute_obj.o deadline_constraint.o insert_precalculate.o rideshar/;"	t
ridesharing.o	Makefile	/^ridesharing.o: ridesharing.c$/;"	t
ridesharing_state	src/main.c	/^RideSharing_State ridesharing_state;$/;"	v	typeref:typename:RideSharing_State
route	include/ridesharing.h	/^    Route route;$/;"	m	struct:RideSharing_State	typeref:typename:Route
scale_vector	src/tools/mathematics.c	/^void scale_vector(coordinate *result, coordinate unit_vector, double scale){$/;"	f	typeref:typename:void
sequenced_location	include/structures.h	/^		coordinate sequenced_location;$/;"	m	struct:location_node	typeref:typename:coordinate
set_of_requests	include/ridesharing.h	/^    Set_of_requests set_of_requests;$/;"	m	struct:RideSharing_State	typeref:typename:Set_of_requests
size	include/structures.h	/^	int size;$/;"	m	struct:Set_of_requests	typeref:typename:int
slk_intermediate	src/constraints/deadline_constraint.c	/^void slk_intermediate(Route r, double *slk, location_node *n, int k, Request newRequest){$/;"	f	typeref:typename:void
slk_time	src/constraints/deadline_constraint.c	/^void slk_time(Route r, double *slk, Request newRequest){$/;"	f	typeref:typename:void
time_between_nodes	src/constraints/compute_obj.c	/^double time_between_nodes(coordinate n1, coordinate n2){$/;"	f	typeref:typename:double
update_route	src/insert_operator/insert_precalculate.c	/^void update_route(Route *r, Worker *w, location_node *before_worker){$/;"	f	typeref:typename:void
update_worker_route	src/insert_operator/insert_precalculate.c	/^void update_worker_route(Route *r, Worker *w, Request *new_request){$/;"	f	typeref:typename:void
worker	include/ridesharing.h	/^    Worker worker;$/;"	m	struct:RideSharing_State	typeref:typename:Worker
x	include/structures.h	/^		double x, y;$/;"	m	struct:coordinate	typeref:typename:double
y	include/structures.h	/^		double x, y;$/;"	m	struct:coordinate	typeref:typename:double
